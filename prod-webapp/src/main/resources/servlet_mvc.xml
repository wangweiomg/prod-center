<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">


	<description>Spring MVC Configuration</description>

    <!-- 启用spring mvc 注解 -->
    <context:annotation-config />

	<!-- 加载配置属性文件 -->
	<context:property-placeholder location="classpath*:config.properties" ignore-unresolvable="true"/>

	<!-- 定义无Controller的path<->view直接映射 -->
	<mvc:view-controller path="/"
		view-name="redirect:${web.view.index}" />

	<!-- 使用Annotation自动注册Bean,只扫描@Controller -->
	<context:component-scan base-package="com.glorystone.amg"
		use-default-filters="false">
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Service" />
	</context:component-scan>
	<mvc:annotation-driven/>

	<!-- 默认的注解映射的支持，org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping -->
	<!--<mvc:annotation-driven
		content-negotiation-manager="contentNegotiationManager">
		<mvc:message-converters register-defaults="true">
			&lt;!&ndash; 将StringHttpMessageConverter的默认编码设为UTF-8 &ndash;&gt;
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
				<constructor-arg value="UTF-8" />
			</bean>-->

			<!-- 将Jackson2HttpMessageConverter的默认格式化输出为false -->
			<!--<bean
				class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
				<property name="supportedMediaTypes">
					<list>
						<value>application/json;charset=UTF-8</value>
					</list>
				</property>
				<property name="prettyPrint" value="false" />
				<property name="objectMapper">
					<bean class="cn.com.yintongkaxinyue.amlrs.base.mapper.JsonMapper"></bean>
				</property>
			</bean>-->

			<!-- 使用XML格式输出数据 -->
			<!--<bean
				class="org.springframework.http.converter.xml.MarshallingHttpMessageConverter">
				<constructor-arg>
					<bean class="org.springframework.oxm.xstream.XStreamMarshaller">
						<property name="streamDriver">
							<bean class="com.thoughtworks.xstream.io.xml.StaxDriver" />
						</property>
						<property name="annotatedClasses">
							<list>
								<value>cn.com.yintongkaxinyue.amlrs.base.persistence.BaseEntity</value>
								<value>cn.com.yintongkaxinyue.amlrs.base.supcan.treelist.TreeList</value>
								<value>cn.com.yintongkaxinyue.amlrs.base.supcan.treelist.cols.Col</value>
								<value>cn.com.yintongkaxinyue.amlrs.base.supcan.treelist.cols.Group</value>
							</list>
						</property>
					</bean>
				</constructor-arg>
				<property name="supportedMediaTypes" value="application/xml"></property>
			</bean>-->
		<!--</mvc:message-converters>-->
	<!--</mvc:annotation-driven>-->

	<!-- REST中根据URL后缀自动判定Content-Type及相应的View -->
	<bean id="contentNegotiationManager"
		class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
		<property name="mediaTypes">
			<map>
				<entry key="xml" value="application/xml" />
				<entry key="json" value="application/json" />
			</map>
		</property>
		<property name="ignoreAcceptHeader" value="true" />
		<property name="favorPathExtension" value="true" />
	</bean>

	<!-- 定义视图文件解析 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="${web.view.prefix}" />
		<property name="suffix" value="${web.view.suffix}" />
	</bean>
	<!-- 上传图片的实现类转换类   名称必须叫multipartResolver -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"/>
		

	<!-- 对静态资源文件的访问， 将无法mapping到Controller的path交给default servlet handler处理 -->
	<mvc:default-servlet-handler />

	<!-- 静态资源映射 -->
	<mvc:resources mapping="/static/**" location="/static/"
		cache-period="31536000" />


	<!-- 拦截器配置，拦截顺序：先执行后定义的，排在第一位的最后执行。 -->
	<!--<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="${wwwPath}/**" />
			&lt;!&ndash; <mvc:exclude-mapping path="${wwwPath}/" /> &ndash;&gt;
			<mvc:exclude-mapping path="${wwwPath}/login" />
			<bean class="cn.com.yintongkaxinyue.amlrs.sys.interceptor.LogInterceptor" />
		</mvc:interceptor>
	</mvc:interceptors>-->


	<!-- 支持Shiro对Controller的方法级AOP安全控制 begin -->
	<!--<bean
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
		depends-on="lifecycleBeanPostProcessor">
		<property name="proxyTargetClass" value="true" />
	</bean>-->

	<!--<bean
		class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<prop key="org.apache.shiro.authz.UnauthorizedException">error/403</prop>
				<prop key="org.apache.shiro.authz.UnauthenticatedException">error/403</prop>
				<prop key="java.lang.Throwable">error/500</prop>
				&lt;!&ndash; <prop key="org.apache.shiro.authz.UnauthorizedException">unauthorized</prop>
				<prop key="org.apache.shiro.authz.UnauthenticatedException">unauthenticated</prop> &ndash;&gt;
			</props>
		</property>
	</bean>-->
</beans>